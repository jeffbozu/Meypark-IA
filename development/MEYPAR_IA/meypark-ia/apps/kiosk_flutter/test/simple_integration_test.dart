import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'package:kiosk_flutter/main.dart';
import 'package:kiosk_flutter/features/home/home_screen.dart';
import 'package:kiosk_flutter/features/pay/zone_picker_screen.dart';
import 'package:kiosk_flutter/features/accessibility/accessibility_screen.dart';
import 'package:kiosk_flutter/core/providers/supabase_providers.dart';

void main() {
  group('üß™ TEST SIMPLIFICADO - VERIFICACI√ìN PANTALLA POR PANTALLA', () {
    testWidgets('üè† PANTALLA HOME - Verificar carga b√°sica',
        (WidgetTester tester) async {
      print('üß™ TESTING: Pantalla Home');

      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: HomeScreen(),
          ),
        ),
      );

      // Esperar a que carguen los datos
      await tester.pumpAndSettle(const Duration(seconds: 2));

      // Verificar que se muestran los elementos principales
      expect(find.text('Bienvenido a MEYPARK'), findsOneWidget);
      expect(find.text('PAGAR ESTACIONAMIENTO'), findsOneWidget);
      expect(find.text('ANULAR DENUNCIA'), findsOneWidget);

      print('‚úÖ HOME: Pantalla carga correctamente');
    });

    testWidgets('üìç PANTALLA ZONAS - Verificar carga de zonas',
        (WidgetTester tester) async {
      print('üß™ TESTING: Pantalla de Zonas');

      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: ZonePickerScreen(),
          ),
        ),
      );

      // Esperar a que carguen las zonas
      await tester.pumpAndSettle(const Duration(seconds: 2));

      // Verificar que se muestran las zonas de demo
      expect(find.text('Zona Centro'), findsOneWidget);
      expect(find.text('Zona Comercial'), findsOneWidget);
      expect(find.text('Zona Residencial'), findsOneWidget);
      expect(find.text('Zona Tur√≠stica'), findsOneWidget);
      expect(find.text('Zona Hospital'), findsOneWidget);
      expect(find.text('Zona Universidad'), findsOneWidget);

      print('‚úÖ ZONAS: Zonas cargan correctamente (demo o Supabase)');
    });

    testWidgets('‚ôø PANTALLA ACCESIBILIDAD - Verificar controles TTS',
        (WidgetTester tester) async {
      print('üß™ TESTING: Pantalla de Accesibilidad');

      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: AccessibilityScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Verificar elementos de la pantalla
      expect(find.text('Configuraci√≥n de Accesibilidad'), findsOneWidget);
      expect(find.text('S√≠ntesis de Voz (TTS)'), findsOneWidget);
      expect(find.text('Accesibilidad Visual'), findsOneWidget);
      expect(find.text('IA Adaptativa'), findsOneWidget);

      // Verificar controles TTS
      expect(find.byType(Switch), findsWidgets);
      expect(find.byType(Slider), findsWidgets);

      print('‚úÖ ACCESIBILIDAD: Controles TTS y accesibilidad correctos');
    });

    testWidgets('üìä VERIFICAR PROVIDERS DE SUPABASE',
        (WidgetTester tester) async {
      print('üß™ TESTING: Providers de Supabase');

      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: HomeScreen(),
          ),
        ),
      );

      // Verificar que los providers est√°n configurados
      final container = ProviderContainer();

      // Test zones provider
      final zonesAsync = container.read(zonesProvider);
      expect(zonesAsync, isA<AsyncValue<List<Map<String, dynamic>>>>());

      // Test themes provider
      final themesAsync = container.read(themesProvider);
      expect(themesAsync, isA<AsyncValue<Map<String, dynamic>?>>());

      // Test AI settings provider
      final aiSettingsAsync = container.read(aiSettingsProvider);
      expect(aiSettingsAsync, isA<AsyncValue<Map<String, dynamic>?>>());

      print(
          '‚úÖ PROVIDERS: Todos los providers de Supabase configurados correctamente');
    });

    testWidgets('üåê VERIFICAR LOCALIZACI√ìN', (WidgetTester tester) async {
      print('üß™ TESTING: Localizaci√≥n');

      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            locale: const Locale('es', 'ES'),
            supportedLocales: const [
              Locale('es', 'ES'),
              Locale('en', 'US'),
              Locale('de', 'DE'),
              Locale('fr', 'FR'),
              Locale('it', 'IT'),
              Locale('ca', 'ES'),
              Locale('gl', 'ES'),
              Locale('eu', 'ES'),
            ],
            home: HomeScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();

      // Verificar que la localizaci√≥n funciona
      expect(find.text('Bienvenido a MEYPARK'), findsOneWidget);

      print('‚úÖ LOCALIZACI√ìN: Soporte multiidioma configurado correctamente');
    });

    testWidgets('‚ö° TEST DE RENDIMIENTO', (WidgetTester tester) async {
      print('üß™ TESTING: Rendimiento de Carga');

      final stopwatch = Stopwatch()..start();

      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: HomeScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle();
      stopwatch.stop();

      // Verificar que la pantalla carga en menos de 5 segundos
      expect(stopwatch.elapsedMilliseconds, lessThan(5000));

      print(
          '‚úÖ RENDIMIENTO: Pantalla carga en ${stopwatch.elapsedMilliseconds}ms');
    });
  });

  group('üéØ VERIFICACI√ìN DE DATOS DESDE SUPABASE', () {
    testWidgets('üîó VERIFICAR CONEXI√ìN SUPABASE', (WidgetTester tester) async {
      print('üß™ TESTING: Conexi√≥n Supabase');

      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: HomeScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle(const Duration(seconds: 3));

      // Verificar que no hay errores de conexi√≥n
      expect(find.text('Error:'), findsNothing);
      expect(find.text('Failed to load'), findsNothing);

      print('‚úÖ SUPABASE: Conexi√≥n establecida correctamente');
    });

    testWidgets('üì± VERIFICAR UI DIN√ÅMICA', (WidgetTester tester) async {
      print('üß™ TESTING: UI Din√°mica desde Supabase');

      await tester.pumpWidget(
        const ProviderScope(
          child: MaterialApp(
            home: HomeScreen(),
          ),
        ),
      );

      await tester.pumpAndSettle(const Duration(seconds: 2));

      // Verificar que el AppBar din√°mico est√° presente
      expect(find.byType(AppBar), findsOneWidget);

      // Verificar que los botones principales est√°n presentes
      expect(find.text('PAGAR ESTACIONAMIENTO'), findsOneWidget);
      expect(find.text('ANULAR DENUNCIA'), findsOneWidget);

      print('‚úÖ UI DIN√ÅMICA: Elementos cargan desde Supabase correctamente');
    });
  });
}
