import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../core/providers/supabase_providers.dart';
import '../../widgets/dynamic_app_bar.dart';

class AccessibilityScreen extends ConsumerStatefulWidget {
  const AccessibilityScreen({super.key});

  @override
  ConsumerState<AccessibilityScreen> createState() =>
      _AccessibilityScreenState();
}

class _AccessibilityScreenState extends ConsumerState<AccessibilityScreen> {
  // Configuraci√≥n de accesibilidad
  bool _darkMode = false;
  bool _highContrast = false;
  double _textSize = 100.0; // Porcentaje
  bool _ttsEnabled = false;
  double _ttsSpeed = 0.8;
  double _ttsPitch = 1.0;
  double _ttsVolume = 0.9;
  bool _voiceInput = false;
  bool _largeKeyboard = false;
  bool _simplifiedMode = false;
  bool _aiAdaptive = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const DynamicAppBar(),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header
            _buildHeader(),

            const SizedBox(height: 24),

            // Secci√≥n Ver
            _buildVisionSection(),

            const SizedBox(height: 24),

            // Secci√≥n Escuchar
            _buildHearingSection(),

            const SizedBox(height: 24),

            // Secci√≥n Introducir
            _buildInputSection(),

            const SizedBox(height: 24),

            // Secci√≥n Tiempo
            _buildTimeSection(),

            const SizedBox(height: 24),

            // Secci√≥n Idioma
            _buildLanguageSection(),

            const SizedBox(height: 24),

            // Secci√≥n IA Adaptativa
            _buildAISection(),

            const SizedBox(height: 32),

            // Botones de acci√≥n
            _buildActionButtons(),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.purple.shade400, Colors.purple.shade600],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          const Icon(
            Icons.accessibility,
            size: 48,
            color: Colors.white,
          ),
          const SizedBox(height: 16),
          const Text(
            'Configuraci√≥n de Accesibilidad',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 8),
          const Text(
            'Personalice la aplicaci√≥n seg√∫n sus necesidades',
            style: TextStyle(
              fontSize: 16,
              color: Colors.white70,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildVisionSection() {
    return _buildSection(
      title: 'üëÅÔ∏è VER',
      icon: Icons.visibility,
      children: [
        _buildAccessibilityCard(
          title: 'Modo Oscuro',
          description: 'Reduce la fatiga visual en entornos con poca luz',
          isEnabled: _darkMode,
          onToggle: (value) => setState(() => _darkMode = value),
          infoText: '''
üåô MODO OSCURO

¬øQu√© hace?
‚Ä¢ Cambia el fondo de la pantalla a colores oscuros
‚Ä¢ Reduce la fatiga visual en entornos con poca luz
‚Ä¢ Mejora la legibilidad en pantallas brillantes
‚Ä¢ Ahorra bater√≠a en dispositivos OLED

¬øCu√°ndo usarlo?
‚Ä¢ En interiores con poca iluminaci√≥n
‚Ä¢ Durante la noche o al amanecer
‚Ä¢ Si tiene sensibilidad a la luz brillante
‚Ä¢ Para reducir el deslumbramiento

¬øC√≥mo funciona?
‚Ä¢ Aplica colores oscuros autom√°ticamente
‚Ä¢ Mantiene el contraste adecuado para la lectura
‚Ä¢ Se activa/desactiva instant√°neamente
‚Ä¢ Se guarda su preferencia autom√°ticamente
''',
        ),
        const SizedBox(height: 12),
        _buildAccessibilityCard(
          title: 'Alto Contraste',
          description:
              'Aumenta la diferencia entre colores para mejor legibilidad',
          isEnabled: _highContrast,
          onToggle: (value) => setState(() => _highContrast = value),
          infoText: '''
üîç ALTO CONTRASTE

¬øQu√© hace?
‚Ä¢ Aumenta la diferencia entre colores de texto y fondo
‚Ä¢ Mejora la legibilidad para personas con discapacidades visuales
‚Ä¢ Cumple con est√°ndares WCAG 2.1 AAA
‚Ä¢ Hace m√°s visible cada elemento de la pantalla

¬øCu√°ndo usarlo?
‚Ä¢ Si tiene dificultades para leer texto normal
‚Ä¢ En pantallas con poca calidad
‚Ä¢ Con poca iluminaci√≥n ambiental
‚Ä¢ Si tiene problemas de visi√≥n

¬øC√≥mo funciona?
‚Ä¢ Aplica colores de m√°ximo contraste
‚Ä¢ Texto blanco sobre fondo negro
‚Ä¢ Botones con bordes bien definidos
‚Ä¢ Iconos con mayor definici√≥n
''',
        ),
        const SizedBox(height: 12),
        _buildSliderCard(
          title: 'Tama√±o del Texto',
          description: 'Ajuste el tama√±o de la fuente',
          value: _textSize,
          min: 100,
          max: 200,
          divisions: 10,
          onChanged: (value) => setState(() => _textSize = value),
          formatValue: (value) => '${value.toInt()}%',
        ),
      ],
    );
  }

  Widget _buildHearingSection() {
    return _buildSection(
      title: 'üîä ESCUCHAR',
      icon: Icons.hearing,
      children: [
        _buildAccessibilityCard(
          title: 'Gu√≠a por Voz (TTS)',
          description: 'Proporciona instrucciones auditivas',
          isEnabled: _ttsEnabled,
          onToggle: (value) => setState(() => _ttsEnabled = value),
          hasSettings: true,
          onSettings: () => _showTTSSettings(),
          infoText: '''
üîä GU√çA POR VOZ

¬øQu√© hace?
‚Ä¢ Lee en voz alta todo el contenido de la pantalla
‚Ä¢ Proporciona instrucciones paso a paso
‚Ä¢ Describe botones y opciones disponibles
‚Ä¢ Ayuda a navegar sin necesidad de ver la pantalla

¬øCu√°ndo usarlo?
‚Ä¢ Si tiene discapacidad visual
‚Ä¢ Para aprender a usar la aplicaci√≥n
‚Ä¢ Cuando no puede ver bien la pantalla
‚Ä¢ Para confirmar acciones importantes

¬øC√≥mo funciona?
‚Ä¢ Activa el Text-to-Speech (TTS)
‚Ä¢ Lee autom√°ticamente cada pantalla
‚Ä¢ Puede ajustar velocidad, tono y volumen
‚Ä¢ Funciona con lectores de pantalla externos

Configuraci√≥n:
‚Ä¢ Velocidad: 0.5x a 2.0x (recomendado 0.8x)
‚Ä¢ Tono: 0.5 a 2.0 (recomendado 1.0)
‚Ä¢ Volumen: 0.0 a 1.0 (recomendado 0.9)
‚Ä¢ Idioma: Se adapta al idioma seleccionado
''',
        ),
      ],
    );
  }

  Widget _buildInputSection() {
    return _buildSection(
      title: '‚å®Ô∏è INTRODUCIR',
      icon: Icons.keyboard,
      children: [
        _buildAccessibilityCard(
          title: 'Entrada por Voz',
          description: 'Permite introducir texto hablando',
          isEnabled: _voiceInput,
          onToggle: (value) => setState(() => _voiceInput = value),
          infoText: '''
üé§ ENTRADA POR VOZ

¬øQu√© hace?
‚Ä¢ Permite introducir texto hablando
‚Ä¢ Convierte su voz en texto autom√°ticamente
‚Ä¢ Funciona con comandos de voz
‚Ä¢ Reduce la necesidad de usar el teclado

¬øCu√°ndo usarlo?
‚Ä¢ Si tiene dificultades para escribir
‚Ä¢ Para introducir matr√≠culas r√°pidamente
‚Ä¢ Si prefiere hablar en lugar de tocar
‚Ä¢ Para personas con movilidad reducida

¬øC√≥mo funciona?
‚Ä¢ Presiona el bot√≥n del micr√≥fono
‚Ä¢ Habla claramente la matr√≠cula
‚Ä¢ El sistema reconoce y convierte a texto
‚Ä¢ Confirma antes de continuar

Comandos disponibles:
‚Ä¢ "Matr√≠cula 1234 ABC"
‚Ä¢ "Zona azul"
‚Ä¢ "Treinta minutos"
‚Ä¢ "Pagar con QR"
''',
        ),
        const SizedBox(height: 12),
        _buildAccessibilityCard(
          title: 'Teclado Grande',
          description: 'Teclado virtual con botones m√°s grandes',
          isEnabled: _largeKeyboard,
          onToggle: (value) => setState(() => _largeKeyboard = value),
        ),
      ],
    );
  }

  Widget _buildTimeSection() {
    return _buildSection(
      title: '‚è∞ TIEMPO',
      icon: Icons.timer,
      children: [
        _buildAccessibilityCard(
          title: 'Ampliar Tiempo',
          description: 'Extiende los tiempos de respuesta',
          isEnabled: false, // Placeholder
          onToggle: (value) {}, // Placeholder
        ),
      ],
    );
  }

  Widget _buildLanguageSection() {
    return _buildSection(
      title: 'üåç IDIOMA',
      icon: Icons.language,
      children: [
        _buildLanguageSelector(),
      ],
    );
  }

  Widget _buildAISection() {
    return _buildSection(
      title: 'ü§ñ IA ADAPTATIVA',
      icon: Icons.psychology,
      children: [
        _buildAccessibilityCard(
          title: 'IA Adaptativa',
          description: 'Personaliza la experiencia seg√∫n su uso',
          isEnabled: _aiAdaptive,
          onToggle: (value) => setState(() => _aiAdaptive = value),
          infoText: '''
ü§ñ IA ADAPTATIVA

¬øQu√© hace?
‚Ä¢ Aprende de c√≥mo usa la aplicaci√≥n
‚Ä¢ Sugiere opciones basadas en su historial
‚Ä¢ Adapta la interfaz a sus preferencias
‚Ä¢ Hace la experiencia m√°s personal

¬øCu√°ndo usarlo?
‚Ä¢ Para obtener recomendaciones inteligentes
‚Ä¢ Si quiere una experiencia personalizada
‚Ä¢ Para ahorrar tiempo en transacciones
‚Ä¢ Si usa la aplicaci√≥n frecuentemente

¬øC√≥mo funciona?
‚Ä¢ Analiza sus √∫ltimas 5 transacciones
‚Ä¢ Sugiere la zona que m√°s usa
‚Ä¢ Recomienda el m√©todo de pago m√°s confiable
‚Ä¢ Ajusta la interfaz seg√∫n sus patrones

Funciones inteligentes:
‚Ä¢ Zona m√°s usada (acceso directo)
‚Ä¢ M√©todo de pago recomendado
‚Ä¢ Duraci√≥n sugerida seg√∫n hora
‚Ä¢ Configuraci√≥n de accesibilidad autom√°tica
‚Ä¢ Predicci√≥n de mantenimiento del kiosko
''',
        ),
        const SizedBox(height: 12),
        _buildAccessibilityCard(
          title: 'Modo Simplificado',
          description: 'Interfaz m√°s simple con menos elementos',
          isEnabled: _simplifiedMode,
          onToggle: (value) => setState(() => _simplifiedMode = value),
          infoText: '''
üéØ MODO SIMPLIFICADO

¬øQu√© hace?
‚Ä¢ Muestra solo las funciones esenciales
‚Ä¢ Botones m√°s grandes y f√°ciles de tocar
‚Ä¢ Navegaci√≥n m√°s simple
‚Ä¢ Menos opciones para evitar confusi√≥n

¬øCu√°ndo usarlo?
‚Ä¢ Si es la primera vez que usa la aplicaci√≥n
‚Ä¢ Si prefiere una interfaz m√°s simple
‚Ä¢ Para personas mayores
‚Ä¢ Si tiene dificultades cognitivas

¬øC√≥mo funciona?
‚Ä¢ Oculta funciones avanzadas
‚Ä¢ Muestra solo "Pagar" y "Anular denuncia"
‚Ä¢ Botones de 80dp (m√°s grandes)
‚Ä¢ Animaciones reducidas
‚Ä¢ Texto m√°s grande y claro
''',
        ),
      ],
    );
  }

  Widget _buildSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(icon, size: 24, color: Colors.purple.shade700),
            const SizedBox(width: 8),
            Text(
              title,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        ...children,
      ],
    );
  }

  Widget _buildAccessibilityCard({
    required String title,
    required String description,
    required bool isEnabled,
    required ValueChanged<bool> onToggle,
    String? infoText,
    bool hasSettings = false,
    VoidCallback? onSettings,
  }) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        description,
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.grey.shade600,
                        ),
                      ),
                    ],
                  ),
                ),
                if (hasSettings)
                  IconButton(
                    icon: const Icon(Icons.settings),
                    onPressed: onSettings,
                  ),
                IconButton(
                  icon: const Icon(Icons.info_outline),
                  onPressed: () => _showInfoDialog(title, infoText ?? ''),
                ),
                Switch(
                  value: isEnabled,
                  onChanged: onToggle,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSliderCard({
    required String title,
    required String description,
    required double value,
    required double min,
    required double max,
    required int divisions,
    required ValueChanged<double> onChanged,
    required String Function(double) formatValue,
  }) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        description,
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.grey.shade600,
                        ),
                      ),
                    ],
                  ),
                ),
                Text(
                  formatValue(value),
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.purple,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Slider(
              value: value,
              min: min,
              max: max,
              divisions: divisions,
              onChanged: onChanged,
              activeColor: Colors.purple,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLanguageSelector() {
    final languages = [
      {'code': 'es', 'name': 'Espa√±ol'},
      {'code': 'en', 'name': 'English'},
      {'code': 'de', 'name': 'Deutsch'},
      {'code': 'fr', 'name': 'Fran√ßais'},
      {'code': 'it', 'name': 'Italiano'},
      {'code': 'ca-ES', 'name': 'Catal√†'},
      {'code': 'gl-ES', 'name': 'Galego'},
      {'code': 'eu-ES', 'name': 'Euskera'},
    ];

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Idioma de la Aplicaci√≥n',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: languages.map((lang) {
                return ChoiceChip(
                  label: Text(lang['name']!),
                  selected: lang['code'] == 'es', // Default to Spanish
                  onSelected: (selected) {
                    if (selected) {
                      // TODO: Implement language change
                      print('Selected language: ${lang['code']}');
                    }
                  },
                );
              }).toList(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActionButtons() {
    return Row(
      children: [
        Expanded(
          child: ElevatedButton(
            onPressed: _resetToDefaults,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.grey,
              minimumSize: const Size(0, 50),
            ),
            child: const Text(
              'Restaurar Predeterminados',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: ElevatedButton(
            onPressed: _saveSettings,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.purple,
              minimumSize: const Size(0, 50),
            ),
            child: const Text(
              'Aplicar Configuraci√≥n',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ),
      ],
    );
  }

  void _showInfoDialog(String title, String infoText) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(title),
        content: SingleChildScrollView(
          child: Text(infoText),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cerrar'),
          ),
        ],
      ),
    );
  }

  void _showTTSSettings() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Configuraci√≥n de Voz'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildSliderSetting(
              'Velocidad',
              _ttsSpeed,
              0.5,
              2.0,
              15,
              (value) => setState(() => _ttsSpeed = value),
              (value) => '${(value * 10).round() / 10}x',
            ),
            _buildSliderSetting(
              'Tono',
              _ttsPitch,
              0.5,
              2.0,
              15,
              (value) => setState(() => _ttsPitch = value),
              (value) => '${(value * 10).round() / 10}',
            ),
            _buildSliderSetting(
              'Volumen',
              _ttsVolume,
              0.0,
              1.0,
              10,
              (value) => setState(() => _ttsVolume = value),
              (value) => '${(value * 100).round()}%',
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cerrar'),
          ),
        ],
      ),
    );
  }

  Widget _buildSliderSetting(
    String title,
    double value,
    double min,
    double max,
    int divisions,
    ValueChanged<double> onChanged,
    String Function(double) formatValue,
  ) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(title),
              Text(formatValue(value)),
            ],
          ),
          Slider(
            value: value,
            min: min,
            max: max,
            divisions: divisions,
            onChanged: onChanged,
          ),
        ],
      ),
    );
  }

  void _resetToDefaults() {
    setState(() {
      _darkMode = false;
      _highContrast = false;
      _textSize = 100.0;
      _ttsEnabled = false;
      _ttsSpeed = 0.8;
      _ttsPitch = 1.0;
      _ttsVolume = 0.9;
      _voiceInput = false;
      _largeKeyboard = false;
      _simplifiedMode = false;
      _aiAdaptive = false;
    });
  }

  void _saveSettings() {
    // TODO: Guardar configuraci√≥n en Supabase
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Configuraci√≥n guardada exitosamente'),
        backgroundColor: Colors.green,
      ),
    );
  }
}
